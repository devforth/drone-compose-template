version: '3.5'

services:
  drone-server:
    image: drone/drone:1.9.1
    ports:
      - 80:80
      - 443:443
    networks:
      - drone
    volumes:
      - ./drone-data:/var/lib/drone/
      - ./drone-certs:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    environment:
      - DRONE_GITHUB=true
      - DRONE_TLS_AUTOCERT=true
      - DRONE_SERVER_PROTO=https
      - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}
      - DRONE_USER_CREATE=${DRONE_USER_CREATE}
      - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}        
      - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}
      - DRONE_RPC_SECRET="${DRONE_RPC_SECRET}"

      - DRON_SERVER_PROTO=http
      - DRONE_DATABASE_DRIVER=sqlite3
      - DRONE_DATABASE_DATASOURCE=/var/lib/drone/drone.sqlite
      - DRONE_DEBUG=true
      

  drone-agent:
    image: drone/agent:1.6.2
    command: agent
    restart: always
    depends_on:
      - drone-server
    networks:
      - drone
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.docker/config.json:/root/.docker/config.json # docker login on host if file does not exist

    environment:
      - DRONE_RPC_SECRET="${DRONE_RPC_SECRET}"
      - DRONE_RPC_HOST=drone-server:80
      - DRONE_RPC_PROTO=http
      - DRONE_DEBUG=true
      - DRONE_DOCKER_CONFIG=/root/.docker/config.json
      

  drone-agent2:
    image: drone/agent:1.6.2
    command: agent
    restart: always
    depends_on:
      - drone-server
    networks:
      - drone
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.docker/config.json:/root/.docker/config.json # docker login on host if file does not exist
    environment:
      - DRONE_RPC_SECRET="${DRONE_RPC_SECRET}"
      - DRONE_RPC_HOST=drone-server:80
      - DRONE_RPC_PROTO=http
      - DRONE_DEBUG=true
      - DRONE_DOCKER_CONFIG=/root/.docker/config.json

  drone-agent3:
    image: drone/agent:1.6.2
    command: agent
    restart: always
    depends_on:
      - drone-server
    networks:
      - drone
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.docker/config.json:/root/.docker/config.json # docker login on host if file does not exist
    environment:
      - DRONE_RPC_SECRET="${DRONE_RPC_SECRET}"
      - DRONE_RPC_HOST=drone-server:80
      - DRONE_RPC_PROTO=http
      - DRONE_DEBUG=true
      - DRONE_DOCKER_CONFIG=/root/.docker/config.json
      
      

networks:
  drone:
    name: drone_network
